package com.wana.fruit.machine.util.common;import java.util.Calendar;import java.util.Date;public class DateUtil {	public static long diffDay(Date date1, Date date2) {		long diff = date1.getTime() - date2.getTime();		diff = diff < 0 ? -1 * diff : diff;		return diff / (24 * 60 * 60 * 1000);	}	public static Date getStartDate(Date date) {		if (date == null) {			return null;		}		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.HOUR_OF_DAY, 0);		cal.set(Calendar.MINUTE, 0);		cal.set(Calendar.SECOND, 0);		cal.set(Calendar.MILLISECOND, 0);		return cal.getTime();	}	public static Date getEndDate(Date date) {		if (date == null) {			return null;		}		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.HOUR_OF_DAY, 23);		cal.set(Calendar.MINUTE, 59);		cal.set(Calendar.SECOND, 59);		cal.set(Calendar.MILLISECOND, 999);		return cal.getTime();	}	public static Date getStartMonth(Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));		return getStartDate(cal.getTime());	}	public static Date getEndMonth(Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));		return getEndDate(cal.getTime());	}	public static Date getStartWeek(Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.DAY_OF_WEEK, 1);		cal.add(Calendar.DATE, 1);		return getStartDate(cal.getTime());	}	public static Date getEndWeek(Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.DAY_OF_WEEK, 7);		cal.add(Calendar.DATE, 1);		return getEndDate(cal.getTime());	}	public static Date getStartYear(Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.set(Calendar.DAY_OF_YEAR, 1);		return getStartDate(cal.getTime());	}	public static Date getEndYear(Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.add(Calendar.YEAR, 1);		cal.set(Calendar.DAY_OF_YEAR, 1);		cal.add(Calendar.DAY_OF_YEAR, -1);		return getEndDate(cal.getTime());	}	/**	 * 取得指定天数后的时间	 * 	 * @param date	 *            基准时间	 * @param dayAmount	 *            指定天数，允许为负数	 * @return 指定天数后的时间	 */	public static Date addDay(Date date, int dayAmount) {		if (date == null) {			return null;		}		Calendar calendar = Calendar.getInstance();		calendar.setTime(date);		calendar.add(Calendar.DATE, dayAmount);		return calendar.getTime();	}	/**	 * 得到当前时间＋addDay（天）的时间	 * 	 * @param addDay	 * @return	 */	public static Date addMonth(Date date, int monthAmount) {		Calendar cal = Calendar.getInstance();		cal.setTime(date);		cal.add(Calendar.MONTH, monthAmount);		return cal.getTime();	}	/**	 * 取得指定分钟数后的时间	 * 	 * @param date	 *            基准时间	 * @param minuteAmount	 *            指定分钟数，允许为负数	 * @return 指定分钟数后的时间	 */	public static Date addMinute(Date date, int minuteAmount) {		if (date == null) {			return null;		}		Calendar calendar = Calendar.getInstance();		calendar.setTime(date);		calendar.add(Calendar.MINUTE, minuteAmount);		return calendar.getTime();	}		public static void main(String[] args) {		System.out.println(DateUtil.getStartDate(new Date()).getTime());		System.out.println(DateUtil.getEndDate(new Date()).getTime());	}}